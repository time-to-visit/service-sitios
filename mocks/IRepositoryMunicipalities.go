// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-sites/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryMunicipalities is an autogenerated mock type for the IRepositoryMunicipalities type
type IRepositoryMunicipalities struct {
	mock.Mock
}

// DeleteMunicipalities provides a mock function with given fields: idMunicipalities
func (_m *IRepositoryMunicipalities) DeleteMunicipalities(idMunicipalities int) error {
	ret := _m.Called(idMunicipalities)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(idMunicipalities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindMunicipalities provides a mock function with given fields: idDeparment
func (_m *IRepositoryMunicipalities) FindMunicipalities(idDeparment int) (*[]entity.Municipalities, error) {
	ret := _m.Called(idDeparment)

	var r0 *[]entity.Municipalities
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]entity.Municipalities, error)); ok {
		return rf(idDeparment)
	}
	if rf, ok := ret.Get(0).(func(int) *[]entity.Municipalities); ok {
		r0 = rf(idDeparment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Municipalities)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idDeparment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneMunicipalities provides a mock function with given fields: idMunicipalities
func (_m *IRepositoryMunicipalities) FindOneMunicipalities(idMunicipalities int) (*entity.Municipalities, error) {
	ret := _m.Called(idMunicipalities)

	var r0 *entity.Municipalities
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Municipalities, error)); ok {
		return rf(idMunicipalities)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Municipalities); ok {
		r0 = rf(idMunicipalities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Municipalities)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idMunicipalities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMunicipalitiest provides a mock function with given fields: municipalities
func (_m *IRepositoryMunicipalities) InsertMunicipalitiest(municipalities entity.Municipalities) (*entity.Municipalities, error) {
	ret := _m.Called(municipalities)

	var r0 *entity.Municipalities
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Municipalities) (*entity.Municipalities, error)); ok {
		return rf(municipalities)
	}
	if rf, ok := ret.Get(0).(func(entity.Municipalities) *entity.Municipalities); ok {
		r0 = rf(municipalities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Municipalities)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Municipalities) error); ok {
		r1 = rf(municipalities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryMunicipalities interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryMunicipalities creates a new instance of IRepositoryMunicipalities. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryMunicipalities(t mockConstructorTestingTNewIRepositoryMunicipalities) *IRepositoryMunicipalities {
	mock := &IRepositoryMunicipalities{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
