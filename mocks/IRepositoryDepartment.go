// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-sites/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryDepartment is an autogenerated mock type for the IRepositoryDepartment type
type IRepositoryDepartment struct {
	mock.Mock
}

// DeleteDepartment provides a mock function with given fields: idDeparment
func (_m *IRepositoryDepartment) DeleteDepartment(idDeparment int) error {
	ret := _m.Called(idDeparment)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(idDeparment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindDepartment provides a mock function with given fields:
func (_m *IRepositoryDepartment) FindDepartment() (*[]entity.Department, error) {
	ret := _m.Called()

	var r0 *[]entity.Department
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entity.Department, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entity.Department); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Department)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDepartmentById provides a mock function with given fields: Id
func (_m *IRepositoryDepartment) FindDepartmentById(Id int) (*entity.Department, error) {
	ret := _m.Called(Id)

	var r0 *entity.Department
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Department, error)); ok {
		return rf(Id)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Department); ok {
		r0 = rf(Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Department)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDepartment provides a mock function with given fields: department
func (_m *IRepositoryDepartment) InsertDepartment(department entity.Department) (*entity.Department, error) {
	ret := _m.Called(department)

	var r0 *entity.Department
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Department) (*entity.Department, error)); ok {
		return rf(department)
	}
	if rf, ok := ret.Get(0).(func(entity.Department) *entity.Department); ok {
		r0 = rf(department)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Department)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Department) error); ok {
		r1 = rf(department)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryDepartment interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryDepartment creates a new instance of IRepositoryDepartment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryDepartment(t mockConstructorTestingTNewIRepositoryDepartment) *IRepositoryDepartment {
	mock := &IRepositoryDepartment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
