// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-sites/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryReview is an autogenerated mock type for the IRepositoryReview type
type IRepositoryReview struct {
	mock.Mock
}

// DeleteReview provides a mock function with given fields: idSites, idReview
func (_m *IRepositoryReview) DeleteReview(idSites int, idReview int) error {
	ret := _m.Called(idSites, idReview)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(idSites, idReview)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindReview provides a mock function with given fields: idSites
func (_m *IRepositoryReview) FindReview(idSites int) (*[]entity.Review, error) {
	ret := _m.Called(idSites)

	var r0 *[]entity.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]entity.Review, error)); ok {
		return rf(idSites)
	}
	if rf, ok := ret.Get(0).(func(int) *[]entity.Review); ok {
		r0 = rf(idSites)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idSites)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertReview provides a mock function with given fields: review
func (_m *IRepositoryReview) InsertReview(review entity.Review) (*entity.Review, error) {
	ret := _m.Called(review)

	var r0 *entity.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Review) (*entity.Review, error)); ok {
		return rf(review)
	}
	if rf, ok := ret.Get(0).(func(entity.Review) *entity.Review); ok {
		r0 = rf(review)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Review) error); ok {
		r1 = rf(review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryReview interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryReview creates a new instance of IRepositoryReview. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryReview(t mockConstructorTestingTNewIRepositoryReview) *IRepositoryReview {
	mock := &IRepositoryReview{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
