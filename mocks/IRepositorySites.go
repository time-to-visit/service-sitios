// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-sites/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositorySites is an autogenerated mock type for the IRepositorySites type
type IRepositorySites struct {
	mock.Mock
}

// DeleteSites provides a mock function with given fields: idSites
func (_m *IRepositorySites) DeleteSites(idSites int) error {
	ret := _m.Called(idSites)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(idSites)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneSites provides a mock function with given fields: idSites
func (_m *IRepositorySites) FindOneSites(idSites int) (*entity.Sites, error) {
	ret := _m.Called(idSites)

	var r0 *entity.Sites
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Sites, error)); ok {
		return rf(idSites)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Sites); ok {
		r0 = rf(idSites)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Sites)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idSites)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSites provides a mock function with given fields: filter
func (_m *IRepositorySites) FindSites(filter map[string]interface{}) (*[]entity.Sites, error) {
	ret := _m.Called(filter)

	var r0 *[]entity.Sites
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (*[]entity.Sites, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *[]entity.Sites); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Sites)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSites provides a mock function with given fields: review
func (_m *IRepositorySites) InsertSites(review entity.Sites) (*entity.Sites, error) {
	ret := _m.Called(review)

	var r0 *entity.Sites
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Sites) (*entity.Sites, error)); ok {
		return rf(review)
	}
	if rf, ok := ret.Get(0).(func(entity.Sites) *entity.Sites); ok {
		r0 = rf(review)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Sites)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Sites) error); ok {
		r1 = rf(review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositorySites interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositorySites creates a new instance of IRepositorySites. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositorySites(t mockConstructorTestingTNewIRepositorySites) *IRepositorySites {
	mock := &IRepositorySites{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
