// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-sites/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryCategory is an autogenerated mock type for the IRepositoryCategory type
type IRepositoryCategory struct {
	mock.Mock
}

// DeleteCategory provides a mock function with given fields: idCategory
func (_m *IRepositoryCategory) DeleteCategory(idCategory int) error {
	ret := _m.Called(idCategory)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(idCategory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindCategory provides a mock function with given fields:
func (_m *IRepositoryCategory) FindCategory() (*[]entity.Category, error) {
	ret := _m.Called()

	var r0 *[]entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entity.Category, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entity.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCategoryById provides a mock function with given fields: idCateogry
func (_m *IRepositoryCategory) FindCategoryById(idCateogry int) (*entity.Category, error) {
	ret := _m.Called(idCateogry)

	var r0 *entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Category, error)); ok {
		return rf(idCateogry)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Category); ok {
		r0 = rf(idCateogry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idCateogry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCategory provides a mock function with given fields: category
func (_m *IRepositoryCategory) RegisterCategory(category entity.Category) (*entity.Category, error) {
	ret := _m.Called(category)

	var r0 *entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Category) (*entity.Category, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(entity.Category) *entity.Category); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Category) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: category
func (_m *IRepositoryCategory) UpdateCategory(category entity.Category) (*entity.Category, error) {
	ret := _m.Called(category)

	var r0 *entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Category) (*entity.Category, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(entity.Category) *entity.Category); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Category) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryCategory interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryCategory creates a new instance of IRepositoryCategory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryCategory(t mockConstructorTestingTNewIRepositoryCategory) *IRepositoryCategory {
	mock := &IRepositoryCategory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
